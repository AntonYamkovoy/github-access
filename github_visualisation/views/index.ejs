

<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Anton Yamkovoy: Software Engeneering Demo Project</title>
    <script src="https://cdn.jsdelivr.net/npm/vega@5.8.1"></script>
    <script src="https://cdn.jsdelivr.net/npm/vega-lite@4.0.0-beta.12"></script>
    <script src="https://cdn.jsdelivr.net/npm/vega-embed@6.1.0"></script>
    <link rel="stylesheet" type="text/css" href="/css/style.css">
  </head>
  <body>
    <div id="info">
      We got data from GitHub ....

    </div>
    <fieldset>
    <form action="/" method="post">
    <div id="filters" class="filters-class">
          <label for="lang">Language</label>
           <select id="lang" name="lang" size="1" width="20">
             <option value = "All" >All Languages </option>
             <% langList.forEach((item) => { %>
               <option value = "<%= item.lang %>"> <%= item.lang %></option>
             <% }); %>
       </select>
      <label for="repo">Repository</label>
      <select id="repo" name="repo" size="1" width="40">
        <option value = "All" >All repos </option>
        <% reposList.forEach((item) => { %>
          <option value = "<%= item.repo_name %>"> <%= item.repo_name %></option>
        <% }); %>
      </select>
      <label for="user">User</label>
      <select id="user" name="user" size="1" width="40">
        <option value = "All" >All users</option>
        <% userList.forEach((item) => { %>
          <option value = "<%= item.login %>"> <%= item.login %></option>
        <% }); %>
      </select>
      <input type="submit" class="go-button" value="Update">
      </form>
    </fieldset>
    </div>
    <div id="chart"></div>

    <div id="vis"></div>

    <script type="text/javascript">


/*
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Test</title>
    <link rel="stylesheet" type="text/css" href="/css/style.css">
    <link href='https://fonts.googleapis.com/css?family=Open+Sans:300' rel='stylesheet' type='text/css'>
  </head>
  <body>
    <div class="container">
      <fieldset>
        <form action="/" method="post">
          <input name="city" type="text" class="ghost-input" placeholder="Enter a City" required>
          <input type="submit" class="ghost-button" value="Get Weather">
        </form>
      </fieldset>
    </div>
  </body>
</html>
*/


      var yourVlSpec = {

         "$schema": "https://vega.github.io/schema/vega/v5.json",
         "width": 800,
         "height": 500,
         "padding": 0,
         "autosize": "none",

         "signals": [
           { "name": "cx", "update": "width / 2" },
           { "name": "cy", "update": "height / 2" },
           { "name": "nodeRadius", "value": 8,
             "bind": {"input": "range", "min": 1, "max": 50, "step": 1} },
           { "name": "nodeCharge", "value": -30,
             "bind": {"input": "range", "min":-100, "max": 10, "step": 1} },
           { "name": "linkDistance", "value": 30,
             "bind": {"input": "range", "min": 5, "max": 100, "step": 1} },
           { "name": "static", "value": true,
             "bind": {"input": "checkbox"} },
           {
             "description": "State variable for active node fix status.",
             "name": "fix", "value": false,
             "on": [
               {
                 "events": "symbol:mouseout[!event.buttons], window:mouseup",
                 "update": "false"
               },
               {
                 "events": "symbol:mouseover",
                 "update": "fix || true"
               },
               {
                 "events": "[symbol:mousedown, window:mouseup] > window:mousemove!",
                 "update": "xy()",
                 "force": true
               }
             ]
           },
           {
             "description": "Graph node most recently interacted with.",
             "name": "node", "value": null,
             "on": [
               {
                 "events": "symbol:mouseover",
                 "update": "fix === true ? item() : node"
               }
             ]
           },
           {
             "description": "Flag to restart Force simulation upon data changes.",
             "name": "restart", "value": false,
             "on": [
               {"events": {"signal": "fix"}, "update": "fix && fix.length"}
             ]
           }
         ],

         "data": [
           {
             "name": "node-data",
             "url": "data/miserables.json",
             "format": {"type": "json", "property": "nodes"}
           },
           {
             "name": "link-data",
             "url": "data/miserables.json",
             "format": {"type": "json", "property": "links"}
           }
         ],

         "scales": [
           {
             "name": "color",
             "type": "ordinal",
             "domain": {"data": "node-data", "field": "group"},
             "range": {"scheme": "category20c"}
           }
         ],

         "marks": [
           {
             "name": "nodes",
             "type": "symbol",
             "zindex": 1,

             "from": {"data": "node-data"},
             "on": [
               {
                 "trigger": "fix",
                 "modify": "node",
                 "values": "fix === true ? {fx: node.x, fy: node.y} : {fx: fix[0], fy: fix[1]}"
               },
               {
                 "trigger": "!fix",
                 "modify": "node", "values": "{fx: null, fy: null}"
               }
             ],

             "encode": {
               "enter": {
                 "fill": {"scale": "color", "field": "group"},
                 "stroke": {"value": "white"}
               },
               "update": {
                 "size": {"signal": "2 * nodeRadius * nodeRadius"},
                 "cursor": {"value": "pointer"}
               }
             },

             "transform": [
               {
                 "type": "force",
                 "iterations": 300,
                 "restart": {"signal": "restart"},
                 "static": {"signal": "static"},
                 "signal": "force",
                 "forces": [
                   {"force": "center", "x": {"signal": "cx"}, "y": {"signal": "cy"}},
                   {"force": "collide", "radius": {"signal": "nodeRadius"}},
                   {"force": "nbody", "strength": {"signal": "nodeCharge"}},
                   {"force": "link", "links": "link-data", "distance": {"signal": "linkDistance"}}
                 ]
               }
             ]
           },
           {
             "type": "path",
             "from": {"data": "link-data"},
             "interactive": false,
             "encode": {
               "update": {
                 "stroke": {"value": "#ccc"},
                 "strokeWidth": {"value": 0.5}
               }
             },
             "transform": [
               {
                 "type": "linkpath",
                 "require": {"signal": "force"},
                 "shape": "line",
                 "sourceX": "datum.source.x", "sourceY": "datum.source.y",
                 "targetX": "datum.target.x", "targetY": "datum.target.y"
               }
             ]
           }
         ]


  };



  var yourVlSpec2 = {


    "$schema": "https://vega.github.io/schema/vega-lite/v4.json",
    "width":700, "height":400, "padding": 20,
    "data": {"url": "data/seattle-weather.csv"},
    "mark": "bar",

    "encoding": {
      "x": {
        "timeUnit": "month",
        "field": "date",
        "type": "ordinal",
        "axis": {"title": "Month of the year"}
      },
      "y": {
        "aggregate": "count",
        "type": "quantitative"
      },
      "color": {
        "field": "weather",
        "type": "nominal",
        "scale": {
          "domain": ["sun", "fog", "drizzle", "rain", "snow"],
          "range": ["#e7ba52", "#c7c7c7", "#aec7e8", "#1f77b4", "#9467bd"]
        },
        "legend": {"title": "Weather type"}
      }
    }


};



        vegaEmbed('#vis', yourVlSpec2);
        vegaEmbed('#chart', yourVlSpec);
        //vegaEmbed('#vis', yourVlSpec2);


    </script>
  </body>

  <style>


  </style>


</html>
